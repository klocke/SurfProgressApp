@page "/surfboard/create"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@using SurfProgressAPI.Shared.Models

<form>
    <div class="border p-3">
        <div class="form-group-row">
            <h2 class="text-info pl-3">Add Surfboard</h2>
        </div>
        <div class="row">
            <div class="col-8">
                <div class="form-group row">
                    <div class="col-4">
                        <label>Display Name</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.DisplayName" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Length</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Length" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Width</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Width" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Thickness</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Thickness" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Volume</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Volume" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Fin Setup</label>
                    </div>
                    <div class="col-8">
                        <select class="form-control" @bind="newBoard.FinSetup">
                            @foreach (Surfboard.FinSetupEnum fs in (Surfboard.FinSetupEnum[])Enum.GetValues(typeof(Surfboard.FinSetupEnum)))
                            {
                                <option value=@fs>@fs</option>
                            }
                        </select>
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Tail</label>
                    </div>
                    <div class="col-8">
                        <select class="form-control" @bind="newBoard.Tail">
                            @foreach (Surfboard.TailEnum t in (Surfboard.TailEnum[])Enum.GetValues(typeof(Surfboard.TailEnum)))
                            {
                                <option value=@t>@t</option>
                            }
                        </select>
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Brand</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Brand" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Shaper</label>
                    </div>
                    <div class="col-8">
                        <input class="form-control" @bind="newBoard.Shaper" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">
                        <label>Surf Sessions</label>
                    </div>
                    <div class="col-8">
                        <input type="button" @onclick="OpenDialogLinkSessions" class="btn btn-info w-100" value="Add/ Edit Surf Sessions" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-8 offset-4 row">
                        <div class="col">
                            <input type="button" @onclick="PostSurfboard" class="btn btn-info w-100" value="Create" />
                        </div>
                        <div class="col">
                            <a href="/surfboard/index" class="btn btn-success w-100"><i class="fas fa-sign-out-alt"></i> Back</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-4">
                @* Keep this empty *@
            </div>
        </div>
    </div>
</form>

@code {
    private Surfboard newBoard = new Surfboard { };
    private List<SurfSession> linkedSessions;

    protected override void OnInitialized()
    {
        DialogService.OnClose += CloseDialogLinkSessions;
    }

    private async Task PostSurfboard()
    {
        var response = await Http.PostAsJsonAsync("/api/Surfboard", newBoard);
        // Update newBoard to include the db created SurfboardId
        newBoard = await response.Content.ReadFromJsonAsync<Surfboard>();

        if (linkedSessions != null)
        {
            foreach (SurfSession session in linkedSessions)
            {
                // Update Foreign Keys
                session.SurfboardId = newBoard.SurfboardId;

                await Http.PutAsJsonAsync($"/api/SurfSession/{session.SurfSessionId}", session);
            }

        }

        NotificationService.Notify(
        new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Created New Surfboard", Duration = 4000 });

        NavigationManager.NavigateTo("/surfboard/index");
    }

    private void OpenDialogLinkSessions()
    {
        DialogService.Open<LinkSurfSessions>("Link Surf Sessions",
            new Dictionary<string, object> { { "LinkedSessions", linkedSessions } },
            new DialogOptions() { Width = "1300px", Height = "700px" });
    }

    private void CloseDialogLinkSessions(dynamic result)
    {
        if (result != null && result is List<SurfSession>)
        {
            linkedSessions = result;
        }
    }
}
