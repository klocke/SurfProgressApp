@page "/surfboard/index"
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService
@using SurfProgressAPI.Shared.Models

<div>
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-primary">Surfboard List</h2>
        </div>
        <div class="col-6 text-right">
            <a href="/surfboard/create" class="btn btn-primary">
                <i class="fas fa-plus"></i> &nbsp; Create New Surfboard
            </a>
        </div>
    </div>

    <br /><br />

    @if (surfboards != null)
    {
        @if (surfboards.Count > 0)
        {
            <table class="table table-bordered table-striped" style="width:100%">
                <thead>
                    <tr>
                        <th>
                            Display Name
                        </th>
                        <th>
                            Length
                        </th>
                        <th>
                            Width
                        </th>
                        <th>
                            Thickness
                        </th>
                        <th>
                            Volume
                        </th>
                        <th>
                            Fin Setup
                        </th>
                        <th>
                            Tail
                        </th>
                        <th>
                            Brand
                        </th>
                        <th>
                            Shaper
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Surfboard surfboard in surfboards)
                    {
                        <tr>
                            <td>@surfboard.DisplayName</td>
                            <td>@surfboard.Length</td>
                            <td>@surfboard.Width</td>
                            <td>@surfboard.Thickness</td>
                            <td>@surfboard.Volume</td>
                            <td>@surfboard.FinSetup</td>
                            <td>@surfboard.Tail</td>
                            <td>@surfboard.Brand</td>
                            <td>@surfboard.Shaper</td>
                            <td class="text-center">
                                <div class="w-100 btn-group" role="group">
                                    <a type="button" @onclick="@(() => ShowList(surfboard.SurfboardId))" class="btn btn-secondary" style="color: #fff" title="show list">
                                        <i class="fas fa-list"></i>
                                    </a>
                                    <a href="/surfboard/edit/@surfboard.SurfboardId" class="btn btn-primary mx-2">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a type="button" @onclick="@(() => DeleteSurfSession(surfboard.SurfboardId))" class="btn btn-danger">
                                        <i class="far fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <span>No Surfboards found.</span>
        }
    }
    else
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }

</div>

@code {
    private List<Surfboard> surfboards;

    protected override async Task OnInitializedAsync()
    {
        await GetSurfboards();
    }

    private async Task DeleteSurfSession(int surfboardId)
    {
        bool result = await DialogService.Confirm("Are you sure?", "Delete Surfboard", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }) ?? false;

        if (result)
        {
            // Update references accordingly to point to null.
            List<SurfSession> updatedSessions = surfboards.Find(s => s.SurfboardId == surfboardId).SurfSessions;

            foreach (SurfSession s in updatedSessions)
            {
                s.SurfboardId = null;
                await Http.PutAsJsonAsync($"/api/SurfSession/{s.SurfSessionId}", s);
            }

            await Http.DeleteAsync($" /api/Surfboard/{surfboardId}");

            // Refresh Table
            await GetSurfboards();

            NotificationService.Notify(
                new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "Deleted Surf Session", Duration = 4000 });
        }
    }

    private void ShowList(int surfboardId)
    {
        DialogService.Open<ShowListSurfSessions>("Surf Session List",
            new Dictionary<string, object>() { { "SurfboardId", surfboardId } },
            new DialogOptions() { Width= "1000px", Height = "700px" });
    }

    private async Task GetSurfboards()
    {
        surfboards = await Http.GetFromJsonAsync<List<Surfboard>>("api/Surfboard");
    }
}
