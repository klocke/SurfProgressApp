@page "/surfsession/edit/{id}"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@using SurfProgressAPI.Shared.Models

@if (editSession != null)
{
    <form method="post">
        <div class="border p-3">
            <div class="form-group-row">
                <h2 class="text-info pl-3">Edit Surf Session</h2>
            </div>
            <div class="row">
                <div class="col-8">
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Date</label>
                        </div>
                        <div class="col-8">
                            <RadzenDatePicker @bind-Value=@editSession.Date DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Time Of Day</label>
                        </div>
                        <div class="col-8">
                            <select class="form-control" @bind="@editSession.TimeOfDay">
                                @foreach (SurfSession.TimeOfDayEnum tod in (SurfSession.TimeOfDayEnum[])Enum.GetValues(typeof(SurfSession.TimeOfDayEnum)))
                                {
                                    <option value=@tod>@tod</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Location</label>
                        </div>
                        <div class="col-8">
                            <input class="form-control" @bind="@editSession.Location" />
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Wave Height</label>
                        </div>
                        <div class="col-8">
                            <select class="form-control" @bind="@editSession.WaveHeight">
                                @foreach (SurfSession.WaveHeightEnum wh in (SurfSession.WaveHeightEnum[])Enum.GetValues(typeof(SurfSession.WaveHeightEnum)))
                                {
                                    <option value=@wh>@wh</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Wave Direction</label>
                        </div>
                        <div class="col-8">
                            <select class="form-control" @bind="@editSession.WaveDirection">
                                @foreach (SurfSession.DirectionEnum wd in (SurfSession.DirectionEnum[])Enum.GetValues(typeof(SurfSession.DirectionEnum)))
                                {
                                    <option value=@wd>@wd</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Wind Direction</label>
                        </div>
                        <div class="col-8">
                            <select class="form-control" @bind="@editSession.WindDirection">
                                @foreach (SurfSession.DirectionEnum wd in (SurfSession.DirectionEnum[])Enum.GetValues(typeof(SurfSession.DirectionEnum)))
                                {
                                    <option value=@wd>@wd</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Wind Speed (knots)</label>
                        </div>
                        <div class="col-8">
                            <input class="form-control" @bind="@editSession.WindSpeed" type="number" min="0" step="1" />
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Rating</label>
                        </div>
                        <div class="col-8">
                            <RadzenRating @bind-Value="@editSession.Rating" Change=@(args => OnChangeRating(args, "Rating with 5 stars")) />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Wave Count</label>
                        </div>
                        <div class="col-8">
                            <input class="form-control" @bind="@editSession.WaveCount" type="number" min="0" step="1" />
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Surfboard</label>
                        </div>
                        <div class="col-8">
                            <select class="form-control" @bind="CheckSelected">
                                <option value="@String.Empty">@String.Empty</option>
                                @if (surfboards != null)
                                {
                                    foreach (Surfboard s in surfboards)
                                    {
                                        <option value="@s.DisplayName">@s.DisplayName</option>
                                    }
                                }
                                else
                                {
                                    <option value="Loading..">Loading..</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-4">
                            <label>Notes</label>
                        </div>
                        <div class="col-8">
                            <RadzenTextArea @bind-Value="@editSession.Notes" Change=@(args => OnChange(args, "TextArea")) />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-8 offset-4 row">
                            <div class="col">
                                <input type="button" @onclick="UpdateSurfSession" class="btn btn-info w-100" value="Update" />
                            </div>
                            <div class="col">
                                <a href="/surfsession/index" class="btn btn-success w-100"><i class="fas fa-sign-out-alt"></i> Back</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    @* Keep this empty *@
                </div>
            </div>
        </div>
    </form>
}
else
{
    <label>Loading..</label>
}

@code {
    private SurfSession editSession;
    private List<Surfboard> surfboards;

    private string SelectedDisplayName { get; set; }
    private string CheckSelected
    {
        get
        {
            return SelectedDisplayName;
        }
        set
        {
            SelectedDisplayName = value;

            if (value != String.Empty)
            {
                editSession.SurfboardId = surfboards.Find(s => s.DisplayName == value).SurfboardId;
            }
            else
            {
                editSession.SurfboardId = null;
            }
        }
    }

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

    [Parameter]
    public string Id { get; set; }
    private int SurfSessionId;

    protected override async Task OnInitializedAsync()
    {
        // TODO: What if you can´t parse it to int 
        SurfSessionId = Int32.Parse(Id);
        // TODO: What if you can´t find it
        editSession = await Http.GetFromJsonAsync<SurfSession>($"/api/SurfSession/{SurfSessionId}");

        surfboards = await Http.GetFromJsonAsync<List<Surfboard>>("/api/Surfboard");

        // init dropdown
        if (editSession.Surfboard != null)
        {
            CheckSelected = editSession.Surfboard.DisplayName;
        }
    }

    private async Task UpdateSurfSession()
    {
        await Http.PutAsJsonAsync($"/api/SurfSession/{SurfSessionId}", editSession);

        NotificationService.Notify(
            new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Edited Surf Session", Duration = 4000 });

        NavigationManager.NavigateTo("/surfsession/index");
    }

    void OnChange(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value?.ToString(format)}");
    }

    void OnChangeRating(int value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }

    void OnChange(string value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = dates.Contains(args.Date);
    }

}
